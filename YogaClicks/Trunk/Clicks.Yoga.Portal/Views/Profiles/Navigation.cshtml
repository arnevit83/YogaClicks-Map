@using System.Web.DynamicData
@using Clicks.Yoga.Domain.Entities
@model Clicks.Yoga.Portal.Models.Profiles.ProfileNavigationModel

@{
    var guid = Guid.NewGuid().ToString();
}

<div id="navwrap">
    @Html.Partial("left-nav-menu")

    <section class="filters profileFilters" id="filter-results">
        <div id="filter-wrap">
            <div class="the-sub-menu">
                <h2>My profile</h2>

                <div id="@guid">
                    @if (!Model.Profile.Professional)
                    {
                        <a href="@Url.Action("Display", "Profiles", new { Model.Profile.Id })" class="personal-profile"><img src="/images/profile-pic.jpg" width="24" height="24" alt="" />Personal profile</a>
                    }

                    <div class="optionWrap">
                        <h4>
                            My pages
                        </h4>
                        <h5>
                            Create professional pages
                            <small class="fr">
                                <a href="javascript:openModal('@Url.Action("Create", "Profiles")')" class="silver button">Create</a>
                            </small>
                            <span class="smalltext">(Teacher, Venue, Teacher Training)</span>
                        </h5>

                        @foreach (var page in Model.Pages)
                        {
                            <a href="@Url.Action("Display", string.Format("{0}s", page.EntityType.Name), new { page.Id })" data-type="@page.EntityTypeName" data-entityid="@page.EntityId" class="personal-profile">
                                @page.Name

                                @if (page.EntityType.Name == typeof(Teacher).Name)
                                {
                                    @:(teacher)
                                }
                            </a>
                        }
                    </div>
                    @if (SecurityContext.HasActor)
                    {
                        <div class="optionWrap">
                            @if (Model.CanCreateActivity)
                            {
                                <h5 class="create-events-header">
                                    Create events and classes
                                    <span class="smalltext">(Holidays/retreats, workshops, weekends, special events) </span>
                                </h5>
                                
                                <div class="create-events-button">
                                    <small class=" fr">
                                        <a href="javascript:openModal('@Url.Action("Create", "Activities", new {Model.Profile.OwnerId})')" class="silver button">Create</a>
                                    </small>
                                </div>
                            }
                        </div>
                        <div class="optionWrap">
                            <h5>
                                Create groups
                                <small class="fr">
                                    <a href="javascript:openModal('@Url.Action("Create", "Groups", new { Model.Profile.OwnerId })')" class="silver button">Create</a>
                                </small>
                            </h5>
                        </div>
                    }
                    <br />
                    <div>
                        <h4>
                            Profile admin
                        </h4>
                        <div class="profileAdmin">
                            @if (SecurityContext.HasActor)
                            {
                                <a href="@Url.Action("Notifications", "Profiles", new { Model.Profile.Id })" class="account-settings personal-profile icon-settings"><span class="NotificationsIndicator" data-format="({0})"></span> Notifications</a>
                                <a href="@Url.Action("Deliveries", "Messaging", new { Model.Profile.Id })" class="account-settings personal-profile icon-settings"><span class="MessagesIndicator" data-format="({0})"></span> Messages</a>

                                if (!Model.Profile.Professional)
                                {
                                    <a href="@Url.Action("FriendRequests", "Profiles", new { Model.Profile.Id })" class="account-settings personal-profile icon-settings"><span class="FriendRequestsIndicator" data-format="({0})"></span> Friend requests</a>
                                }
                            }

                            <a href="@Url.Action("Settings", "Account", new { Model.Profile.Id })" class="account-settings personal-profile icon-settings"><span>&nbsp;</span>Account settings</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
</div>

<script>
    $(function () {
        var $container = $('#@guid');

        $container.find('[data-role=DeleteOwnedButton]').on('click', function (e) {
            e.preventDefault();

            var $this = $(this);
            var id = $this.attr('data-entity-id');
            var type = $this.attr('data-entity-type');

            if (!confirm('Are you sure you want to delete this ' + type.toLowerCase() + '?')) return;

            $.ajax({
                url: '@Url.Action("DeleteOwned", "Profiles", new { @Model.Profile.Id })',
                type: 'POST',
                data: { EntityId: id, EntityType: type },
                success: function () {
                    top.location.reload();
                }
            });
        });

        $container.find('a').each(function () {
            var $this = $(this);
            var matches = /^\/\w+\/\w+\/\w+/.exec($this.attr('href').toLowerCase());
            var prefix = matches ? matches[0] : null;

            if (!prefix) return;

            if (window.location.href.toLowerCase().indexOf(prefix) >= 0) {
                $this.attr('class', $this.attr('class') + " active");
                return false;
            }
        });

        if ($container.find('a.active').length == 0) {
            $container.find('a').each(function () {
                var $this = $(this);
                var matches = /^\/\w+\/\w+/.exec($this.attr('href').toLowerCase());
                var prefix = matches ? matches[0] : null;

                if (!prefix) return;

                if (window.location.href.toLowerCase().indexOf(prefix) >= 0) {
                    $this.attr('class', $this.attr('class') + " active");
                    return false;
                }
            });
        }
    });
</script>
